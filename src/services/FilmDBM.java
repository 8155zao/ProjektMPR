package services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Piotr.Film;

	public class FilmDBM 
{

		private Connection connect;
		private Statement StworzTabele;
		private PreparedStatement DodajFilmStmt;
		private PreparedStatement PobierzFilmStmt;
		private PreparedStatement ZnajdzFilmPoTytuleStmt;
		private PreparedStatement UsunFilmStmt;
		private PreparedStatement UsunWszystkieFilmyStmt;


		public FilmDBM()
	{

		try 
		{
		    connect = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		    StworzTabele = connect.createStatement();
		    ResultSet wynik = connect.getMetaData().getTables(null, null, null, null);
		    boolean FilmTableExists=false;
		    while(wynik.next())
		{
		  if("Filmy".equalsIgnoreCase(wynik.getString("Table_Name")))
		{
		  FilmTableExists=true;
		  break;
		}
		}
		  if(!FilmTableExists)
		{
		    StworzTabele.executeUpdate("" +
		    "CREATE TABLE (" +
		    "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
		    "id_klienta integer," +
		    "autor varchar(20)," + " tytul varchar(50)," + "cena varchar(10),"+
		    "Constraint klient_fk foreign key (id_klienta) references klienci(id) on delete cascade" +
		    ")");
		}
		  DodajFilmStmt = connect.prepareStatement("" +"INSERT INTO Filmy (Gatunek, Tytul, Rok_wydania, id_klienta) VALUES (?,?,?,?)" +"");
		  PobierzFilmStmt = connect.prepareStatement("" +"SELECT * FROM Filmy" +"");
		  ZnajdzFilmPoTytuleStmt = connect.prepareStatement("SELECT * FROM Filmy WHERE Tytul= ?");
		  UsunFilmStmt = connect.prepareStatement("DELETE FROM Filmy WHERE ID = ?");
		  UsunWszystkieFilmyStmt = connect.prepareStatement("DELETE FROM Filmy");
		} catch (SQLException e) 
		{

		    e.printStackTrace();
		}
		}
		  public List<Integer> ZnajdzFilmPoTytule (String tytul) {
		  try 
		{
		    List<Integer> wyszukane = new ArrayList<Integer>();
		    ZnajdzFilmPoTytuleStmt.setString(1, tytul);
		    ResultSet wynik = ZnajdzFilmPoTytuleStmt.executeQuery();
		    while (wynik.next())
		    wyszukane.add(wynik.getInt("ID"));
		    return wyszukane;
		} 
		  catch (SQLException e) 
		{
		  e.printStackTrace();
		}
		  return null;
		}

		    public void DodajFilm (Film f, List<Integer> klient)
		{
		  try 
		{
			  DodajFilmStmt.setString(1, f.getGatunek());
			  DodajFilmStmt.setString(2, f.getTytul());
			  DodajFilmStmt.setInt(3, f.getRok_wydania());
			  for (Integer Id : klient)
		{
		  DodajFilmStmt.setInt(4, Id);
		}
		  DodajFilmStmt.executeUpdate();

		} 
		  	  catch (SQLException e) 
		{
		  	  e.printStackTrace();
		}
		}
		  public List<Film> PobierzFilmy (){
		  List<Film> filmy =new ArrayList<Film>();

		  try 
		{
			  ResultSet wynik = PobierzFilmStmt.executeQuery();

			  while(wynik.next())
		{
		  filmy.add(new Film(wynik.getString("Gatunek"),wynik.getString("Tytul"),wynik.getInt("Rok_wydania")));
		}

		}
		  catch (SQLException e) 
		{
			  e.printStackTrace();
		}
		  return filmy;
		}

		  	public void UsunFilm(List<Integer> filmy) {
		  	try 
		{
		    for (Integer id : filmy) 
		{
		    	UsunFilmStmt.setInt(1, id);
		    	UsunFilmStmt.executeUpdate();
		}
		}
		  	catch (SQLException e) 
		{
		  	e.printStackTrace();
		}
		}
		  	public void UsunWszystkieFilmy() 
		{
		  	try 
		{
		  		UsunWszystkieFilmyStmt.executeUpdate();
		}
		  		catch (SQLException e)
		{
		  	e.printStackTrace();
		}
	}

}


