package services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Piotr.Klient;

public class WypozyczalniaDBM 
{
	

	private Connection connect;
	private Statement StworzTabele;
	private PreparedStatement DodajKlientaStmt; 
	private PreparedStatement PobierzKlientaStmt;
	private PreparedStatement ZnajdzKlientaStmt;
	private PreparedStatement UsunKlientaStmt;
	private PreparedStatement UsunWszystkichKlientowStmt;
	
	public WypozyczalniaDBM()
	{

		try 
	{
		connect = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		StworzTabele = connect.createStatement();
		ResultSet wynik =connect.getMetaData().getTables(null, null, null, null);
		boolean KlienciTableExists=false;
		while(wynik.next())
	{
			if("Klienci".equalsIgnoreCase(wynik.getString("Table_Name")))
	{
			KlienciTableExists=true;
			break;
	}
	}
		if(!KlienciTableExists)
	{
		StworzTabele.executeUpdate("" +
		"CREATE TABLE Klienci(" +
		"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
		"klient_nr Integer,imie varchar(20),"+
		"" +"nazwisko varchar (50)" + "" +
		")");
	}
	

	  DodajKlientaStmt = connect.prepareStatement("INSERT INTO Klienci (imie, nazwisko) VALUES (?, ?)");
	  PobierzKlientaStmt = connect.prepareStatement("SELECT * FROM Klienci");
	  ZnajdzKlientaStmt = connect.prepareStatement("SELECT * FROM Klienci WHERE nazwisko = ?");
	  UsunKlientaStmt = connect.prepareStatement("DELETE FROM Klienci WHERE ID = ?");
	  UsunWszystkichKlientowStmt = connect.prepareStatement("DELETE FROM Klienci");

	} 		
		catch (SQLException e)
	{

			e.printStackTrace();
	}
	}
		

	  public void DodajKlienta (Klient k) {
	  try
	{
		  	DodajKlientaStmt.setString(1, k.getImie());
		  	DodajKlientaStmt.setString(2, k.getNazwisko());
		  	DodajKlientaStmt.executeUpdate();
	}

	catch (SQLException e)
	{

	  e.printStackTrace();
	}
	}
  			public List<Klient> PobierzKlienta(){
  			List<Klient> klienci =new ArrayList<Klient>();    

  		try 
  	{
  			ResultSet wynik = PobierzKlientaStmt.executeQuery();

  			while(wynik.next())
  	{
  		klienci.add(new Klient(wynik.getInt("numer_klienta"),wynik.getString("imie"),wynik.getString("nazwisko")));
  	}
  	}

  		catch (SQLException e) 
  	{

  			e.printStackTrace();
  	}

  		return klienci;
  	}
  			public List<Integer> ZnajdzKlienta (String nazwisko) {
  			try 
  	{
	
  				List<Integer> znaleziony = new ArrayList<Integer>();
  				ZnajdzKlientaStmt.setString(1, nazwisko);
  				ResultSet wynik = ZnajdzKlientaStmt.executeQuery();
  				while (wynik.next())
  				znaleziony.add(wynik.getInt("ID"));
  				return znaleziony;
  	}
  			catch (SQLException e) 
  	{
  			e.printStackTrace();
  	}
  		return null;
  	}
  			public void UsunKlienta(List<Integer> klienci) 
  	{
  			try 
  	{
  				for (Integer id : klienci) {
  				UsunKlientaStmt.setInt(1, id);
  				UsunKlientaStmt.executeUpdate();
	}
  	}
  			catch (SQLException e) 
  	{
  			e.printStackTrace();
	}
	}
  		public void UsunWszystkichKlientow() 
  	{
  			try 
  	{
  			UsunWszystkichKlientowStmt.executeUpdate();
  	}
  				catch (SQLException e)
  	{
  				e.printStackTrace();
  	}
  	}
}